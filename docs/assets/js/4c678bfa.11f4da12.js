"use strict";(self.webpackChunkgpupdate_docs=self.webpackChunkgpupdate_docs||[]).push([[5192],{4739:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var s=i(4848),t=i(8453);const a={},l=void 0,r={id:"gpoa/plugin/plugin_manager",title:"plugin_manager",description:"ClassDef plugin_manager",source:"@site/docs/gpoa/plugin/plugin_manager.md",sourceDirName:"gpoa/plugin",slug:"/gpoa/plugin/plugin_manager",permalink:"/gpupdate-docs/docs/gpoa/plugin/plugin_manager",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"exceptions",permalink:"/gpupdate-docs/docs/gpoa/plugin/exceptions"},next:{title:"roles",permalink:"/gpupdate-docs/docs/gpoa/plugin/roles"}},c={},d=[{value:"ClassDef plugin_manager",id:"classdef-plugin_manager",level:2},{value:"FunctionDef <strong>init</strong>(self)",id:"functiondef-initself",level:3},{value:"FunctionDef run(self)",id:"functiondef-runself",level:3}];function o(e){const n={code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"classdef-plugin_manager",children:"ClassDef plugin_manager"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"plugin_manager"}),": The function of plugin_manager is to manage and run plugins."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"attributes"}),":\n\xb7 plugins: A dictionary that stores plugins with their names as keys and plugin instances as values."]}),"\n",(0,s.jsxs)(n.h3,{id:"functiondef-initself",children:["FunctionDef ",(0,s.jsx)(n.strong,{children:"init"}),"(self)"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.strong,{children:"init"})}),": The function of ",(0,s.jsx)(n.strong,{children:"init"})," is to initialize the plugin manager object and load the 'adp' plugin."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"parameters"}),": This Function does not have any parameters."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Code Description"}),":"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"__init__"})," method of the ",(0,s.jsx)(n.code,{children:"plugin_manager"})," class initializes the class and loads the 'adp' plugin. It first creates an empty dictionary to store the plugins. Then, it logs a debug message using the ",(0,s.jsx)(n.code,{children:"slogm"})," class, which formats messages with a timestamp, a message, and a dictionary of keyword arguments."]}),"\n",(0,s.jsxs)(n.p,{children:["Next, it attempts to load the 'adp' plugin by creating an instance of the ",(0,s.jsx)(n.code,{children:"adp"})," class. If the 'adp' package is not installed, a ",(0,s.jsx)(n.code,{children:"PluginInitError"})," exception is raised with a specific error message. If the package is installed, it logs an informational message."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"__init__"})," method is called by the ",(0,s.jsx)(n.code,{children:"plugin_manager"})," class constructor to initialize the plugin manager object. It is responsible for loading the 'adp' plugin and storing it in the plugins dictionary."]}),"\n",(0,s.jsxs)(n.p,{children:["From a functional perspective, the ",(0,s.jsx)(n.code,{children:"__init__"})," method is called by the ",(0,s.jsx)(n.code,{children:"plugin_manager"})," class constructor when an instance of the class is created. It initializes the class and loads the 'adp' plugin, which can then be accessed and managed by the plugin manager."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"__init__"})," method assumes that the 'adp' package is installed as an RPM package. If the package is installed in a different way, the ",(0,s.jsx)(n.code,{children:"is_rpm_installed"})," function may need to be modified."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"__init__"})," method uses the ",(0,s.jsx)(n.code,{children:"slogm"})," class to log messages. It is important to include any relevant keyword arguments in the kwargs parameter to provide additional context for debugging and troubleshooting."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"__init__"})," method does not handle any specific exceptions. If certain exceptions are expected, they should be caught and handled appropriately."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Here is an example of how the ",(0,s.jsx)(n.code,{children:"__init__"})," method is used:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from plugin_manager import PluginManager\n\n# create a new plugin manager object\nplugin_manager = PluginManager()\n\n# access the 'adp' plugin\nadp_plugin = plugin_manager.plugins['adp']\n"})}),"\n",(0,s.jsx)(n.p,{children:"In this example, a new plugin manager object is created, which loads the 'adp' plugin. The 'adp' plugin can then be accessed and managed by the plugin manager."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"functiondef-runself",children:"FunctionDef run(self)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"run"}),": The function of run is to execute the plugins 'adp' and 'roles' in the system."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"parameters"}),": This function does not take any parameters."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Code Description"}),":\nThe ",(0,s.jsx)(n.code,{children:"run"})," function is a method of the ",(0,s.jsx)(n.code,{children:"plugin_manager"})," class, which is defined in the ",(0,s.jsx)(n.code,{children:"plugin_manager.py"})," file. This function is responsible for running the plugins 'adp' and 'roles' by creating instances of their respective classes and calling their ",(0,s.jsx)(n.code,{children:"run"})," methods."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"run"})," function first creates an instance of the ",(0,s.jsx)(n.code,{children:"plugin"})," class for the 'adp' plugin by calling ",(0,s.jsx)(n.code,{children:"plugin('adp')"}),". It then gets the 'adp' plugin from the ",(0,s.jsx)(n.code,{children:"plugins"})," dictionary using the ",(0,s.jsx)(n.code,{children:"get"})," method and calls its ",(0,s.jsx)(n.code,{children:"run"})," method. The same process is repeated for the 'roles' plugin."]}),"\n",(0,s.jsxs)(n.p,{children:["It is important to note that the ",(0,s.jsx)(n.code,{children:"run"})," method in the ",(0,s.jsx)(n.code,{children:"plugin"})," class is empty and should be implemented by the specific plugin classes. The ",(0,s.jsx)(n.code,{children:"plugin"})," class is intended to be used as a base class for all plugins in the system, providing a consistent interface for plugin management and execution. When creating a new plugin, it is recommended to inherit from the ",(0,s.jsx)(n.code,{children:"plugin"})," class and implement the ",(0,s.jsx)(n.code,{children:"run"})," method to provide the plugin's functionality."]}),"\n",(0,s.jsxs)(n.p,{children:["From a functional perspective, the ",(0,s.jsx)(n.code,{children:"run"})," function in the ",(0,s.jsx)(n.code,{children:"plugin_manager"})," class is responsible for managing and executing plugins in a unified manner. It provides a consistent interface for plugins, allowing them to be managed and executed in a unified manner."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"run"})," function does not take any parameters."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"run"})," method in the ",(0,s.jsx)(n.code,{children:"plugin"})," class is empty and should be implemented by the specific plugin classes."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"plugin"})," class is intended to be used as a base class for all plugins in the system, providing a consistent interface for plugin management and execution."]}),"\n",(0,s.jsxs)(n.li,{children:["When creating a new plugin, it is recommended to inherit from the ",(0,s.jsx)(n.code,{children:"plugin"})," class and implement the ",(0,s.jsx)(n.code,{children:"run"})," method to provide the plugin's functionality."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"run"})," function in the ",(0,s.jsx)(n.code,{children:"plugin_manager"})," class is responsible for managing and executing plugins in a unified manner. It provides a consistent interface for plugins, allowing them to be managed and executed in a unified manner."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>r});var s=i(6540);const t={},a=s.createContext(t);function l(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);