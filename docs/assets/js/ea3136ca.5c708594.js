"use strict";(self.webpackChunkgpupdate_docs=self.webpackChunkgpupdate_docs||[]).push([[4194],{9391:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>d,toc:()=>a});var n=s(4848),r=s(8453);const i={},o=void 0,d={id:"gpoa/test/gpt/test_drives",title:"test_drives",description:"ClassDef GptDrivesTestCase",source:"@site/docs/gpoa/test/gpt/test_drives.md",sourceDirName:"gpoa/test/gpt",slug:"/gpoa/test/gpt/test_drives",permalink:"/docs/gpoa/test/gpt/test_drives",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"test_packages",permalink:"/docs/gpoa/test/frontend/appliers/test_packages"},next:{title:"test_shortcuts",permalink:"/docs/gpoa/test/gpt/test_shortcuts"}},c={},a=[{value:"ClassDef GptDrivesTestCase",id:"classdef-gptdrivestestcase",level:2},{value:"FunctionDef test_drive_reader(self, cdir_mock)",id:"functiondef-test_drive_readerself-cdir_mock",level:3}];function h(e){const t={code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"classdef-gptdrivestestcase",children:"ClassDef GptDrivesTestCase"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"GptDrivesTestCase"}),": The function of GptDrivesTestCase is to test the functionality of reading objects from Shortcuts.xml using the ",(0,n.jsx)(t.code,{children:"test_drive_reader"})," method."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"attributes"}),": The attributes of this Class are inherited from the ",(0,n.jsx)(t.code,{children:"unittest.TestCase"})," class and do not have any additional parameters."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Code Description"}),":"]}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"GptDrivesTestCase"})," class is a subclass of ",(0,n.jsx)(t.code,{children:"unittest.TestCase"})," and is used to test the functionality of the ",(0,n.jsx)(t.code,{children:"gpt.drives.read_drives"})," method. The ",(0,n.jsx)(t.code,{children:"test_drive_reader"})," method is a test method that uses the ",(0,n.jsx)(t.code,{children:"unittest.mock.patch"})," decorator to mock the ",(0,n.jsx)(t.code,{children:"cache_dir"})," function from the ",(0,n.jsx)(t.code,{children:"util.paths"})," module. This is done to isolate the test and ensure that it does not depend on external resources."]}),"\n",(0,n.jsxs)(t.p,{children:["In the ",(0,n.jsx)(t.code,{children:"test_drive_reader"})," method, the ",(0,n.jsx)(t.code,{children:"cdir_mock.return_value"})," is set to ",(0,n.jsx)(t.code,{children:"'/var/cache/gpupdate'"})," to specify the cache directory path for the test. The ",(0,n.jsx)(t.code,{children:"gpt.drives.read_drives"})," method is then called with the path to the test data file as an argument."]}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"read_drives"})," method returns a list of drive objects, which are then converted to JSON format using the ",(0,n.jsx)(t.code,{children:"to_json"})," method. The JSON object is then checked to ensure that it is not ",(0,n.jsx)(t.code,{children:"None"})," and that the ",(0,n.jsx)(t.code,{children:"drive"})," key is present."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Note"}),":"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["The ",(0,n.jsx)(t.code,{children:"unittest.mock.patch"})," decorator is used to mock the ",(0,n.jsx)(t.code,{children:"cache_dir"})," function from the ",(0,n.jsx)(t.code,{children:"util.paths"})," module. This is done to ensure that the test does not depend on external resources and to make the test more reliable."]}),"\n",(0,n.jsxs)(t.li,{children:["The ",(0,n.jsx)(t.code,{children:"to_json"})," method is used to convert the drive object to JSON format. This is done to check the contents of the object and ensure that it is correctly populated."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Output Example"}),":"]}),"\n",(0,n.jsxs)(t.p,{children:["The output of the ",(0,n.jsx)(t.code,{children:"test_drive_reader"})," method would be a ",(0,n.jsx)(t.code,{children:"None"})," assertion error if the ",(0,n.jsx)(t.code,{children:"drive"})," key is not present in the JSON object. If the ",(0,n.jsx)(t.code,{children:"drive"})," key is present, the test would pass."]}),"\n",(0,n.jsx)(t.h3,{id:"functiondef-test_drive_readerself-cdir_mock",children:"FunctionDef test_drive_reader(self, cdir_mock)"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"test_drive_reader"}),": The function of test_drive_reader is to test the functionality of reading objects from Shortcuts.xml using the read_drives function."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"parameters"}),": The parameters of this Function are:\n\xb7 cdir_mock: A mock object that returns a specified directory path when called."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Code Description"}),":\nThe test_drive_reader function begins by setting the return value of the cdir_mock object to '/var/cache/gpupdate'. It then imports the gpt.drives module and sets the path of the test data file (Drives.xml) using the os.getcwd() function to get the current working directory."]}),"\n",(0,n.jsx)(t.p,{children:"Next, it calls the read_drives function with the test data file path as an argument and assigns the returned list of drivemap objects to the variable drvs."}),"\n",(0,n.jsx)(t.p,{children:"After that, it converts the first drive object in the drvs list to a JSON formatted string using the to_json function and parses it into a Python dictionary using the json.loads() function."}),"\n",(0,n.jsx)(t.p,{children:"Finally, it asserts that the 'drive' key of the parsed JSON object is not None, which tests whether the drive object contains the necessary drive information."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Relation with Callees"}),":\nThe test_drive_reader function calls the read_drives function to read the drive information from the test data file and converts the returned drive object to a JSON formatted string using the to_json function."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Note"}),":\nThe test_drive_reader function is a test function that tests the functionality of reading objects from Shortcuts.xml using the read_drives function. It uses a mock object to set the directory path for testing purposes."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Output Example"}),":\nA possible output of the test_drive_reader function when the test data file contains valid drive information would be:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"None\n"})}),"\n",(0,n.jsx)(t.p,{children:"This indicates that the assertion passed and the drive object contains the necessary drive information."}),"\n",(0,n.jsx)(t.hr,{})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>d});var n=s(6540);const r={},i=n.createContext(r);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);