"use strict";(self.webpackChunkgpupdate_docs=self.webpackChunkgpupdate_docs||[]).push([[1738],{3929:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>h,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var t=i(4848),c=i(8453);const s={},o=void 0,r={id:"gpoa/frontend/appliers/ini_file",title:"ini_file",description:"ClassDef Ini_file",source:"@site/docs/gpoa/frontend/appliers/ini_file.md",sourceDirName:"gpoa/frontend/appliers",slug:"/gpoa/frontend/appliers/ini_file",permalink:"/docs/gpoa/frontend/appliers/ini_file",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"gsettings",permalink:"/docs/gpoa/frontend/appliers/gsettings"},next:{title:"netshare",permalink:"/docs/gpoa/frontend/appliers/netshare"}},h={},d=[{value:"ClassDef Ini_file",id:"classdef-ini_file",level:2},{value:"FunctionDef <strong>init</strong>(self, ini_obj, username)",id:"functiondef-initself-ini_obj-username",level:3},{value:"FunctionDef _create_action(self)",id:"functiondef-_create_actionself",level:3},{value:"FunctionDef _delete_action(self)",id:"functiondef-_delete_actionself",level:3},{value:"FunctionDef act(self)",id:"functiondef-actself",level:3},{value:"FunctionDef check_path(path_to_check, username)",id:"functiondef-check_pathpath_to_check-username",level:2}];function a(e){const n={code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"classdef-ini_file",children:"ClassDef Ini_file"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Ini_file"}),": The function of Ini_file is to create, update, delete, or replace INI file entries based on the provided parameters."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"attributes"}),":\n\xb7 ",(0,t.jsx)(n.code,{children:"path"}),": The path to the INI file.\n\xb7 ",(0,t.jsx)(n.code,{children:"section"}),": The section of the INI file where the key-value pair will be added or modified.\n\xb7 ",(0,t.jsx)(n.code,{children:"action"}),": The action to perform on the INI file (create, update, delete, or replace).\n\xb7 ",(0,t.jsx)(n.code,{children:"key"}),": The key of the INI file entry.\n\xb7 ",(0,t.jsx)(n.code,{children:"value"}),": The value of the INI file entry.\n\xb7 ",(0,t.jsx)(n.code,{children:"config"}),": A ConfigObj object representing the INI file."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code Description"}),":\nThe ",(0,t.jsx)(n.code,{children:"Ini_file"})," class initializes with the provided ",(0,t.jsx)(n.code,{children:"ini_obj"})," object and an optional ",(0,t.jsx)(n.code,{children:"username"}),". The ",(0,t.jsx)(n.code,{children:"path"})," attribute is constructed using the ",(0,t.jsx)(n.code,{children:"path"})," attribute of ",(0,t.jsx)(n.code,{children:"ini_obj"}),", and the ",(0,t.jsx)(n.code,{children:"section"}),", ",(0,t.jsx)(n.code,{children:"action"}),", ",(0,t.jsx)(n.code,{children:"key"}),", and ",(0,t.jsx)(n.code,{children:"value"})," attributes are assigned their respective values from ",(0,t.jsx)(n.code,{children:"ini_obj"}),". The ",(0,t.jsx)(n.code,{children:"config"})," attribute is initialized as a ",(0,t.jsx)(n.code,{children:"GpoaConfigObj"})," object representing the INI file at the ",(0,t.jsx)(n.code,{children:"path"})," location. If there is an error in creating the ",(0,t.jsx)(n.code,{children:"config"})," object, the function logs the error and returns. Finally, the ",(0,t.jsx)(n.code,{children:"act"})," method is called to perform the specified action on the INI file."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"_create_action"})," method creates a new entry in the INI file or updates an existing one if the ",(0,t.jsx)(n.code,{children:"section"})," and ",(0,t.jsx)(n.code,{children:"key"})," already exist. The method first checks if the ",(0,t.jsx)(n.code,{children:"path"})," is a directory and returns if it is. If the ",(0,t.jsx)(n.code,{children:"section"})," does not exist in the ",(0,t.jsx)(n.code,{children:"config"})," object, it is created as a dictionary. The ",(0,t.jsx)(n.code,{children:"key"})," and ",(0,t.jsx)(n.code,{children:"value"})," are then added to the ",(0,t.jsx)(n.code,{children:"section"})," dictionary and the ",(0,t.jsx)(n.code,{children:"config"})," object is written to disk."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"_delete_action"})," method deletes an entry from the INI file. If the ",(0,t.jsx)(n.code,{children:"path"})," does not exist or is a directory, the method returns. If the ",(0,t.jsx)(n.code,{children:"section"})," is not specified, the entire file is deleted. If the ",(0,t.jsx)(n.code,{children:"section"})," exists in the ",(0,t.jsx)(n.code,{children:"config"})," object, the ",(0,t.jsx)(n.code,{children:"key"})," is deleted from the ",(0,t.jsx)(n.code,{children:"section"})," dictionary. If the ",(0,t.jsx)(n.code,{children:"key"})," is not specified, the entire ",(0,t.jsx)(n.code,{children:"section"})," is deleted. The ",(0,t.jsx)(n.code,{children:"config"})," object is then written to disk."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"act"})," method performs the specified action on the INI file. It first checks if the ",(0,t.jsx)(n.code,{children:"action"})," is valid and performs the corresponding method (",(0,t.jsx)(n.code,{children:"_create_action"}),", ",(0,t.jsx)(n.code,{children:"_delete_action"}),"). If there is an error during the execution of the method, the error is logged."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note"}),":\nThe ",(0,t.jsx)(n.code,{children:"Ini_file"})," class assumes that the ",(0,t.jsx)(n.code,{children:"ini_obj"})," parameter passed to its constructor is a valid object with the required attributes (",(0,t.jsx)(n.code,{children:"path"}),", ",(0,t.jsx)(n.code,{children:"section"}),", ",(0,t.jsx)(n.code,{children:"action"}),", ",(0,t.jsx)(n.code,{children:"property"}),", ",(0,t.jsx)(n.code,{children:"value"}),"). If the ",(0,t.jsx)(n.code,{children:"ini_obj"})," parameter is not valid, the function may not behave as expected."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Output Example"}),":\nSuppose the following ",(0,t.jsx)(n.code,{children:"ini_obj"})," object is passed to the ",(0,t.jsx)(n.code,{children:"Ini_file"})," constructor:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"ini_obj = {\n    'path': 'C:/example.ini',\n    'section': 'example_section',\n    'action': 'create',\n    'property': 'example_key',\n    'value': 'example_value'\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Ini_file"})," object would create a new entry in the ",(0,t.jsx)(n.code,{children:"example.ini"})," file with the following content:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-makefile",children:"[example_section]\nexample_key = example_value\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If the ",(0,t.jsx)(n.code,{children:"action"})," attribute of ",(0,t.jsx)(n.code,{children:"ini_obj"})," is set to ",(0,t.jsx)(n.code,{children:"update"}),", the ",(0,t.jsx)(n.code,{children:"Ini_file"})," object would update the existing entry instead of creating a new one. If the ",(0,t.jsx)(n.code,{children:"action"})," attribute is set to ",(0,t.jsx)(n.code,{children:"delete"}),", the ",(0,t.jsx)(n.code,{children:"Ini_file"})," object would delete the entry with the specified ",(0,t.jsx)(n.code,{children:"section"})," and ",(0,t.jsx)(n.code,{children:"key"})," from the ",(0,t.jsx)(n.code,{children:"example.ini"})," file."]}),"\n",(0,t.jsxs)(n.h3,{id:"functiondef-initself-ini_obj-username",children:["FunctionDef ",(0,t.jsx)(n.strong,{children:"init"}),"(self, ini_obj, username)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.strong,{children:"init"})}),": The function of ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.strong,{children:"init"})})," is to initialize an instance of the Ini_file class. This function is called when a new instance of the Ini_file class is created."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"parameters"}),":\n\xb7 ",(0,t.jsx)(n.code,{children:"ini_obj"}),": An instance of the IniObj class, which contains information about the ini file such as its path, section, action, key, and value.\n\xb7 ",(0,t.jsx)(n.code,{children:"username"})," (optional): A string representing the username of the user who will be accessing the ini file. This parameter is optional and defaults to None."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code Description"}),":\nThe function begins by expanding the path of the ini file using the ",(0,t.jsx)(n.code,{children:"expand_windows_var"})," function, which replaces any environment variables in the path with their actual values. It then checks if the expanded path exists and is a valid path for an ini file. If the path is not valid, the function logs an error message and returns None."]}),"\n",(0,t.jsxs)(n.p,{children:["Next, the function initializes several attributes of the Ini_file instance using the information from the ",(0,t.jsx)(n.code,{children:"ini_obj"})," parameter. The ",(0,t.jsx)(n.code,{children:"section"}),", ",(0,t.jsx)(n.code,{children:"action"}),", ",(0,t.jsx)(n.code,{children:"key"}),", and ",(0,t.jsx)(n.code,{children:"value"})," attributes are set to the corresponding values from ",(0,t.jsx)(n.code,{children:"ini_obj"}),". The ",(0,t.jsx)(n.code,{children:"path"})," attribute is set to the expanded path of the ini file."]}),"\n",(0,t.jsxs)(n.p,{children:["The function then creates an instance of the ",(0,t.jsx)(n.code,{children:"GpoaConfigObj"})," class using the ",(0,t.jsx)(n.code,{children:"path"})," attribute. The ",(0,t.jsx)(n.code,{children:"GpoaConfigObj"})," class is used to parse and manipulate the contents of the ini file. If there is an exception while creating the ",(0,t.jsx)(n.code,{children:"GpoaConfigObj"})," instance, the function logs an error message and returns."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"functiondef-_create_actionself",children:"FunctionDef _create_action(self)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"_create_action"})}),": The function of ",(0,t.jsx)(n.code,{children:"_create_action"})," is to create a new action for the ",(0,t.jsx)(n.code,{children:"Ini_file"})," class, specifically for adding a new key-value pair to the configuration object."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"parameters"}),":\n\xb7 ",(0,t.jsx)(n.code,{children:"self"}),": The instance of the class ",(0,t.jsx)(n.code,{children:"Ini_file"}),"."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"functiondef-_delete_actionself",children:"FunctionDef _delete_action(self)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"_delete_action"})}),": The function of ",(0,t.jsx)(n.code,{children:"_delete_action"})," is to delete a specific action from an Ini file based on the object's attributes."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"parameters"}),":\n\xb7 ",(0,t.jsx)(n.code,{children:"self"}),": The instance of the class ",(0,t.jsx)(n.code,{children:"Ini_file"}),"."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"functiondef-actself",children:"FunctionDef act(self)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"act"}),": The function of act is to perform a specific action on an ini file based on the action attribute of the object."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"parameters"}),":\n\xb7 ",(0,t.jsx)(n.code,{children:"self"}),": The instance of the class ",(0,t.jsx)(n.code,{children:"Ini_file"}),"."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"functiondef-check_pathpath_to_check-username",children:"FunctionDef check_path(path_to_check, username)"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"check_path"}),": The function of check_path is to verify the correct path for IniFile in the project. It checks if the provided path exists and satisfies certain conditions to be a valid path for IniFile."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"parameters"}),":\n\xb7 path_to_check (str): The path to check if it is a valid path for IniFile.\n\xb7 username (str, optional): The username to use when checking the path. Defaults to None."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Code Description"}),":\nThe function ",(0,t.jsx)(n.code,{children:"check_path"})," takes two parameters: ",(0,t.jsx)(n.code,{children:"path_to_check"})," and ",(0,t.jsx)(n.code,{children:"username"}),". It first creates a ",(0,t.jsx)(n.code,{children:"Path"})," object from the provided path and checks if it exists. If the path exists, it checks if the ",(0,t.jsx)(n.code,{children:"username"})," is provided and if the path is equal to the root directory ",(0,t.jsx)(n.code,{children:"/"}),". If both conditions are satisfied, it returns the home directory of the user. Otherwise, it returns the existing path."]}),"\n",(0,t.jsxs)(n.p,{children:["If the path does not exist, it checks if the path contains a directory without the ",(0,t.jsx)(n.code,{children:"nameIni"})," suffix. If it does, it returns the path. If the ",(0,t.jsx)(n.code,{children:"username"})," is provided, it creates a new path by joining the home directory of the user and the provided path. It then calls the ",(0,t.jsx)(n.code,{children:"check_path"})," function recursively with the new path as the argument. If none of the above conditions are satisfied, it returns ",(0,t.jsx)(n.code,{children:"False"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["This function is used in the ",(0,t.jsx)(n.code,{children:"__init__"})," method of the ",(0,t.jsx)(n.code,{children:"Ini_file"})," class in ",(0,t.jsx)(n.code,{children:"ini_file.py"})," to check the path of the IniFile object. It is also used in the ",(0,t.jsx)(n.code,{children:"expand_windows_var"})," function in ",(0,t.jsx)(n.code,{children:"util.py"})," to check the expanded path of the IniFile object."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note"}),":\nIt is important to note that this function relies on the ",(0,t.jsx)(n.code,{children:"get_homedir"})," function in ",(0,t.jsx)(n.code,{children:"util.py"})," to retrieve the home directory of the user. If the password database is not properly configured, this function may return incorrect or incomplete information."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Output Example"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"check_path('/etc/iniFile')  # returns: PosixPath('/etc/iniFile')\ncheck_path('/etc/iniFile', 'user')  # returns: PosixPath('/home/user/etc/iniFile')\ncheck_path('/iniFile', 'user')  # returns: PosixPath('/home/user/iniFile')\ncheck_path('~/iniFile', 'user')  # returns: PosixPath('/home/user/iniFile')\ncheck_path('/nonexistent/directory')  # returns: False\n"})}),"\n",(0,t.jsx)(n.p,{children:"In the above examples, the function checks different paths and returns the appropriate value based on the conditions specified in the code."})]})}function l(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var t=i(6540);const c={},s=t.createContext(c);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);